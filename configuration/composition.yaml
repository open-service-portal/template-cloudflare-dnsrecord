# Cloudflare DNS Record Composition
# Purpose: Implements CloudflareDNSRecord using External-DNS via DNSEndpoint
# Restaurant Analogy: The "recipe" that tells External-DNS what DNS records to create
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cloudflarednsrecord
  labels:
    provider: external-dns
    type: dns-record
spec:
  compositeTypeRef:
    apiVersion: openportal.dev/v1alpha1
    kind: CloudflareDNSRecord
  
  mode: Pipeline
  pipeline:
  
  # Step 1: Set default zone via go-templating
  - step: set-defaults
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{/* Set default zone if not provided */}}
          apiVersion: openportal.dev/v1alpha1
          kind: CloudflareDNSRecord
          metadata:
            annotations:
              default-zone: "openportal.dev"
  
  # Step 2: Create DNSEndpoint for External-DNS using go-templating
  - step: create-dns-endpoint
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{- $name := .observed.composite.resource.spec.name }}
          {{- $type := .observed.composite.resource.spec.type }}
          {{- $value := .observed.composite.resource.spec.value }}
          {{- $ttl := .observed.composite.resource.spec.ttl | default 1 }}
          {{- $proxied := .observed.composite.resource.spec.proxied | default false }}
          {{- $priority := .observed.composite.resource.spec.priority }}
          {{- $comment := .observed.composite.resource.spec.comment }}
          {{- $xrName := .observed.composite.resource.metadata.name }}
          {{- $namespace := .observed.composite.resource.metadata.namespace | default "default" }}
          
          {{/* Use default zone for now - can be made configurable later */}}
          {{- $zone := "openportal.dev" }}
          
          {{/* Construct FQDN */}}
          {{- $fqdn := printf "%s.%s" $name $zone }}
          {{- if eq $name "@" }}
            {{- $fqdn = $zone }}
          {{- end }}
          
          ---
          # DNSEndpoint for External-DNS
          apiVersion: externaldns.openportal.dev/v1alpha1
          kind: DNSEndpoint
          metadata:
            name: {{ $xrName }}
            namespace: {{ $namespace }}
            annotations:
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $xrName }}-endpoint
              {{- if $comment }}
              dns-record-comment: {{ $comment | quote }}
              {{- end }}
              {{- if $proxied }}
              cloudflare-proxied: "{{ $proxied }}"
              {{- end }}
            labels:
              managed-by: crossplane
              dns-type: {{ $type | lower }}
          spec:
            endpoints:
            - dnsName: {{ $fqdn }}
              recordType: {{ $type }}
              {{- if ne $ttl 1 }}
              recordTTL: {{ $ttl }}
              {{- end }}
              targets:
              - {{ $value | quote }}
              {{- if $priority }}
              providerSpecific:
              - name: priority
                value: {{ $priority | quote }}
              {{- end }}
              {{- if $proxied }}
              - name: cloudflare-proxied
                value: "{{ $proxied }}"
              {{- end }}
  
  # Step 3: Update status with FQDN and record info  
  - step: update-status
    functionRef:
      name: function-go-templating
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      kind: GoTemplate
      source: Inline
      inline:
        template: |
          {{- $name := .observed.composite.resource.spec.name }}
          {{- $zone := "openportal.dev" }}
          {{- $fqdn := printf "%s.%s" $name $zone }}
          {{- if eq $name "@" }}
            {{- $fqdn = $zone }}
          {{- end }}
          
          apiVersion: openportal.dev/v1alpha1
          kind: CloudflareDNSRecord
          status:
            fqdn: {{ $fqdn }}
  
  # Step 4: Mark as ready when DNSEndpoint is created
  - step: auto-ready
    functionRef:
      name: function-auto-ready