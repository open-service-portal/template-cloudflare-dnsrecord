# CloudflareDNSRecord XRD
# Purpose: Define API for managing real DNS records in Cloudflare
# Restaurant Analogy: The "menu" for DNS record orders that will be fulfilled by Cloudflare
apiVersion: apiextensions.crossplane.io/v2
kind: CompositeResourceDefinition
metadata:
  name: cloudflarednsrecords.openportal.dev
  labels:
    terasky.backstage.io/generate-form: "true"
  annotations:
    crossplane.io/version: "v2.0"
    description: "Manage real DNS records in Cloudflare"
    openportal.dev/tags: "dns,cloudflare"
    # Backstage catalog metadata
    backstage.io/title: "Cloudflare DNS Record"
    backstage.io/description: "Create and manage DNS records in Cloudflare with automatic zone configuration"
    backstage.io/source-location: "url:https://github.com/open-service-portal/template-cloudflare-dnsrecord"
    github.com/project-slug: "open-service-portal/template-cloudflare-dnsrecord"
    terasky.backstage.io/tags: "dns,cloudflare"
    # Terasky specific
    terasky.backstage.io/add-to-catalog: 'true'
    terasky.backstage.io/owner: 'platform-team'
    terasky.backstage.io/system: 'infrastructure-templates'
    terasky.backstage.io/component-type: 'crossplane-template'
    terasky.backstage.io/lifecycle: 'production'
    # Form behavior hints
    terasky.backstage.io/composition-strategy: 'direct'
    terasky.backstage.io/default-composition: 'cloudflarednsrecord'
    terasky.backstage.io/skip-publish-step: 'true'
    terasky.backstage.io/auto-apply: 'true'
spec:
  scope: Namespaced  # Crossplane v2 - XRs can be created in any namespace
  group: openportal.dev
  names:
    kind: CloudflareDNSRecord
    plural: cloudflarednsrecords
    singular: cloudflarednsrecord
    listKind: CloudflareDNSRecordList
  defaultCompositionRef:
    name: cloudflarednsrecord
  versions:
  - name: v1alpha1
    served: true
    referenceable: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            required:
              - type
              - name
              - value
            properties:
              type:
                type: string
                description: "DNS record type"
                enum:
                  - A
                  - AAAA
                  - CNAME
                  - TXT
                  - MX
                  - NS
                  - SRV
              name:
                type: string
                description: "Subdomain name (e.g., 'api' creates api.yourdomain.com, use '@' for root domain)"
                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?(@)?$'
                minLength: 1
                maxLength: 63
                examples:
                  - "api"
                  - "www"
                  - "staging"
                  - "@"
              value:
                type: string
                description: "Target value: IPv4 for A, IPv6 for AAAA, hostname for CNAME, text for TXT"
                examples:
                  - "192.168.1.100"
                  - "2001:db8::1"
                  - "target.example.com"
              ttl:
                type: integer
                description: "Time to live in seconds (1 = automatic)"
                default: 1
                minimum: 1
                maximum: 86400
              proxied:
                type: boolean
                description: "Whether to use Cloudflare proxy (orange cloud)"
                default: false
              priority:
                type: integer
                description: "Priority for MX and SRV records"
                minimum: 0
                maximum: 65535
              comment:
                type: string
                description: "Optional comment for the DNS record"
                maxLength: 100
              zone:
                type: string
                description: "Cloudflare Zone resource (leave default for openportal.dev domain)"
                default: "openportal-zone"
                # Remove enum to avoid duplication - just use default
                # To add more zones: kubectl get zones.zone.cloudflare.upbound.io
                # Each Zone resource represents a domain you can create records in
          status:
            type: object
            properties:
              fqdn:
                type: string
                description: "Fully qualified domain name"
              recordId:
                type: string
                description: "Cloudflare record ID"
              ready:
                type: boolean
                description: "Whether the record is ready"